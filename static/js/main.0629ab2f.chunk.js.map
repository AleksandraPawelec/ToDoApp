{"version":3,"sources":["components/AddTask.js","components/Task.js","components/TaskList.js","components/App.js","serviceWorker.js","index.js"],"names":["AddTask","state","text","checked","date","Date","toISOString","slice","handleText","e","setState","target","value","handleDate","handleCheckbox","handleClick","length","props","add","alert","maxDate","this","className","type","placeholder","onChange","id","htmlFor","max","onClick","Component","Task","task","active","important","finishDate","style","color","change","delete","finish","toLocaleDateString","TaskList","tasks","filter","sort","a","b","done","activeTasks","map","key","doneTasks","App","counter","deleteTask","index","findIndex","console","log","splice","changeTaskStatus","Array","from","forEach","getTime","prevState","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0629ab2f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./AddTask.css\";\n\nclass AddTask extends Component {\n  state = {\n    text: \"\",\n    checked: false,\n    date: new Date().toISOString().slice(0, 10)\n  };\n  handleText = e => {\n    this.setState({\n      text: e.target.value\n    });\n  };\n  handleDate = e => {\n    this.setState({\n      date: e.target.value\n    });\n  };\n  handleCheckbox = e => {\n    this.setState({\n      checked: e.target.checked\n    });\n  };\n  handleClick = () => {\n    const { text, date, checked } = this.state;\n    if (text.length > 2) {\n      const add = this.props.add(text, date, checked);\n\n      if (add) {\n        this.setState({\n          text: \"\",\n          checked: false,\n          date: new Date().toISOString().slice(0, 10)\n        });\n      }\n    } else {\n      alert(\"nieporawna nazwa zadania\");\n    }\n  };\n  render() {\n    let maxDate = this.state.date.slice(0, 4) * 1 + 1;\n    maxDate = maxDate + \"-12-31\";\n    return (\n      <div className=\"form\">\n        <input\n          type=\"text\"\n          placeholder=\"wpisz zadanie\"\n          value={this.state.text}\n          onChange={this.handleText}\n        ></input>\n        <input\n          type=\"checkbox\"\n          checked={this.state.checked}\n          id=\"important\"\n          className=\"important\"\n          onChange={this.handleCheckbox}\n        />\n        <label htmlFor=\"important\" className=\"important\">\n          Priorytet\n        </label>\n        <br />\n        <label htmlFor=\"date\">Do kiedy chcesz zrobić? </label>\n        <input\n          type=\"date\"\n          value={this.state.date}\n          max={maxDate}\n          onChange={this.handleDate}\n        />\n        <button onClick={this.handleClick}>Dodaj</button>\n      </div>\n    );\n  }\n}\n\nexport default AddTask;\n","import React from \"react\";\n\nconst Task = props => {\n  const { text, date, id, active, important, finishDate } = props.task;\n\n  const style = {\n    color: \"Firebrick\"\n  };\n  if (active) {\n    return (\n      <>\n        <div>\n          <p>\n            <strong style={important ? style : null}>{text}</strong> do\n            <span>{date}</span>\n            <button className=\"done\" onClick={() => props.change(id)}>\n              Zrobione\n            </button>\n            <button className=\"x\" onClick={() => props.delete(id)}>\n              x\n            </button>\n          </p>\n        </div>\n      </>\n    );\n  } else {\n    const finish = new Date(finishDate).toLocaleDateString();\n    return (\n      <div>\n        <p>\n          <strong>{text} do </strong> <em>(zrobić do: {date} )</em> <br />\n          potwierdzenie wykonania z <span> {finish} </span>\n          <button onClick={() => props.delete(id)}>x</button>\n        </p>\n      </div>\n    );\n  }\n};\n\nexport default Task;\n","import React from \"react\";\nimport Task from \"./Task\";\n\nconst TaskList = props => {\n  const active = props.tasks.filter(task => task.active);\n  active.sort(function(a, b) {\n    if (a.id > b.id) {\n      return -1;\n    } else {\n      return 1;\n    }\n  });\n\n  const done = props.tasks.filter(task => !task.active);\n\n  done.sort(function(a, b) {\n    return b.finishDate - a.finishDate;\n  });\n  const activeTasks = active.map(task => (\n    <Task\n      key={task.id}\n      task={task}\n      delete={props.delete}\n      change={props.change}\n    />\n  ));\n  const doneTasks = done.map(task => (\n    <Task\n      key={task.id}\n      task={task}\n      delete={props.delete}\n      change={props.change}\n    />\n  ));\n\n  return (\n    <>\n      <div className=\"active\">\n        {/* <hr></hr> */}\n        <h2> Do zrobienia:</h2>\n        {activeTasks.length > 0 ? activeTasks : <p> Wszystko zrobione </p>}\n\n        <hr></hr>\n      </div>\n\n      <div className=\"done\">\n        <h2>\n          Zrobione: <em>{doneTasks.length}</em>\n        </h2>\n        {doneTasks.length > 4 && (\n          <span>Wyświetlonych są tylko ostatnie 4 zadania </span>\n        )}\n        {doneTasks.slice(0, 4)}\n      </div>\n    </>\n  );\n};\n\nexport default TaskList;\n","import React, { Component } from \"react\";\nimport AddTask from \"./AddTask\";\nimport TaskList from \"./TaskList\";\nimport \"./App.css\";\n\nclass App extends Component {\n  counter = 4;\n  state = {\n    tasks: [\n      // {\n      //   id: 0,\n      //   text: \"nauczć się nowego języka\",\n      //   date: \"2020-04-01\",\n      //   important: false,\n      //   active: true,\n      //   finishDate: null\n      // },\n      // {\n      //   id: 1,\n      //   text: \"opłacić rachunki\",\n      //   date: \"2020-02-25\",\n      //   important: true,\n      //   active: true,\n      //   finishDate: null\n      // },\n      // {\n      //   id: 2,\n      //   text: \"oddać projekt\",\n      //   date: \"2020-05-10\",\n      //   important: true,\n      //   active: true,\n      //   finishDate: null\n      // },\n      // {\n      //   id: 3,\n      //   text: \"zapisać się na event\",\n      //   date: \"2020-02-12\",\n      //   important: false,\n      //   active: true,\n      //   finishDate: null\n      // }\n    ]\n  };\n  deleteTask = id => {\n    let tasks = [...this.state.tasks];\n    let index = tasks.findIndex(task => task.id === id);\n    console.log(index);\n    tasks.splice(index, 1);\n\n    this.setState({\n      tasks: tasks\n    });\n  };\n\n  changeTaskStatus = id => {\n    let tasks = Array.from(this.state.tasks);\n\n    tasks.forEach(task => {\n      if (task.id === id) {\n        task.active = false;\n        task.finishDate = new Date().getTime();\n      }\n    });\n    this.setState({\n      tasks\n    });\n  };\n  AddTask = (text, date, important) => {\n    const task = {\n      id: this.counter,\n      text: text,\n      date: date,\n      important: important,\n      active: true,\n      finishDate: null\n    };\n    this.counter++;\n\n    this.setState(prevState => ({\n      tasks: [...prevState.tasks, task]\n    }));\n\n    return true;\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <h2 className=\"first\">To-Do-App</h2>\n        <AddTask add={this.AddTask} />\n        <TaskList\n          tasks={this.state.tasks}\n          delete={this.deleteTask}\n          change={this.changeTaskStatus}\n        />\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}